name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Go tests and linting
  backend-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Go code is not properly formatted:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Build binary
      run: go build -o compass cmd/compass/main.go

  # Frontend dashboard tests and linting
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./dashboard
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run TypeScript check
      run: npm run build
    
    - name: Check for unused dependencies
      run: npx depcheck --ignores="@types/*,vite,@vitejs/*"

  # Build artifacts for supported platforms (Linux and macOS only)
  build:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json
    
    - name: Build frontend
      run: |
        cd dashboard
        npm ci
        npm run build
    
    - name: Build backend for supported platforms
      run: |
        # Create build info
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_COMMIT=$(git rev-parse --short HEAD)
        
        # Build for macOS (both Intel and Apple Silicon)
        GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.BuildTime=$BUILD_TIME -X main.GitCommit=$GIT_COMMIT" -o compass-darwin-amd64 cmd/compass/main.go
        GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.BuildTime=$BUILD_TIME -X main.GitCommit=$GIT_COMMIT" -o compass-darwin-arm64 cmd/compass/main.go
        
        # Build for Linux
        GOOS=linux GOARCH=amd64 go build -ldflags "-X main.BuildTime=$BUILD_TIME -X main.GitCommit=$GIT_COMMIT" -o compass-linux-amd64 cmd/compass/main.go
        
        # Create checksums
        sha256sum compass-* > checksums.txt
    
    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: compass-binaries
        path: |
          compass-*
          checksums.txt
        retention-days: 30
